1 - Represent Vector

 Operations:
	
	Magnitude: done
		
		v = (1,-2,-2)
		magnitude of v ( ||v|| ) = sqaurerootOf(x^2+y^2+z^2) = rootOf(9) = 3

	Normalize: done
		v / ||v|| 

	Dot Product: done
		V1.V2 = a1b1 + a2b2+ a3b3

	Addition: done
		V1 + V2 

	Subtraction:  done
		V1 - V2

	Multiplication: done
		V1 * n

	Division: done
		V1 / n


2 - Colors

 Represent colors(R,G,B) 

 Write ppm files

3 - 3D in 2D
 	Algorithm:
		
		step-1: Shoot a ray towards each pixel
		step-2: Find the nearest object hit by the ray in the scene
		step-3: If hit then find color at surface of the object

	Intersection of a ray with a sphere:
			case-1: Intersects at 2 points
			case-2: Intersects at 1 point(tangent)
			case-3 Does not intersect
		sphere to ray = ray_orgin - sphere_center
		
		Ray-Sphere intersection formula
		
			let a = 1, b = 2*ray_dir.sphere_to_ray, c = sphere_to_ray.sphere_to_ray-(sphere_radius)^2
			
			discriminant = b^2 - 4ac = b^2 - 4c

			if discriminant > 0 it intersects at 2 points

			if discriminant = 0 Intesects at 1 point
	
			if discriminant < 0 Does not intersects

			Distance to point of intersection from ray orgin

				dist = -b -sqrt(discriminant)/2a = -b -sqrt(discriminant)/2

			Position of intersection

				hit position = ray_orgin + ray_direction * dist

	Aspect ratio correcting:

		AspectRatio = width/height 

		y_max = 1/aspect_ratio
	
		y_min = y_max * -1



4 - Implement light
 
  
	Apply shading algorithms

		Difuse shading = cos(angle_between normal and incident ray)

		if Normal is N and ray is L then the Color at surface = L.N * M_diffuse * C_object


		M_difuse is the difuse amount of the material

		C_object is the color of the object



		Specular shading = light_color * material_specular(H.R)^k
		
		R is direction of perfect reflection

		H = norm(L+V), where L is the light source and V  is the view direction

		k is shininess of object


	Material - has base color, diffuse color, abient color and specular color

	Light - has position and color
